import json

class JSONToBNFTranslator:
    def __init__(self):
        self.rules = []
        self.counter = 0  # For generating unique rule names
    
    def translate(self, json_data):
        if isinstance(json_data, dict):
            return self._translate_object(json_data)
        elif isinstance(json_data, list):
            return self._translate_array(json_data)
        else:
            return self._translate_primitive(json_data)

    def _translate_object(self, obj):
        rule_name = self._generate_rule_name("object")
        rule_body = []
        
        for key, value in obj.items():
            child_rule = self.translate(value)
            rule_body.append(f'"{key}" : {child_rule}')
        
        rule = f"<{rule_name}> ::= {{ {', '.join(rule_body)} }}"
        self.rules.append(rule)
        return f"<{rule_name}>"

    def _translate_array(self, arr):
        rule_name = self._generate_rule_name("array")
        if arr:
            # Assuming homogeneous arrays (BNF doesn't handle heterogeneous arrays well)
            child_rule = self.translate(arr[0])
            rule = f"<{rule_name}> ::= [ {child_rule} ]*"
        else:
            rule = f"<{rule_name}> ::= [ ]"
        
        self.rules.append(rule)
        return f"<{rule_name}>"

    def _translate_primitive(self, value):
        if isinstance(value, str):
            return '"string"'
        elif isinstance(value, bool):
            return '"boolean"'
        elif isinstance(value, int) or isinstance(value, float):
            return '"number"'
        elif value is None:
            return '"null"'
        else:
            raise ValueError(f"Unsupported value type: {type(value)}")

    def _generate_rule_name(self, base):
        self.counter += 1
        return f"{base}_{self.counter}"

    def print_rules(self):
        return "\n".join(self.rules)

# Example usage
json_string = '''
{
  "name": "John",
  "age": 30,
  "isStudent": false,
  "courses": [
    "Math",
    "Science"
  ],
  "address": {
    "city": "New York",
    "zipcode": "10001"
  }
}
'''

json_data = json.loads(json_string)
translator = JSONToBNFTranslator()
translator.translate(json_data)
print(translator.print_rules())
